//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./summarization_types');
//HELPER FUNCTIONS AND STRUCTURES

var SummarizationModel_predict_args = function(args) {
  this.articles = null;
  if (args) {
    if (args.articles !== undefined && args.articles !== null) {
      this.articles = Thrift.copyList(args.articles, [ttypes.Article]);
    }
  }
};
SummarizationModel_predict_args.prototype = {};
SummarizationModel_predict_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.articles = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.Article();
          elem3.read(input);
          this.articles.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SummarizationModel_predict_args.prototype.write = function(output) {
  output.writeStructBegin('SummarizationModel_predict_args');
  if (this.articles !== null && this.articles !== undefined) {
    output.writeFieldBegin('articles', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.articles.length);
    for (var iter4 in this.articles) {
      if (this.articles.hasOwnProperty(iter4)) {
        iter4 = this.articles[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SummarizationModel_predict_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Summarization]);
    }
  }
};
SummarizationModel_predict_result.prototype = {};
SummarizationModel_predict_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.Summarization();
          elem8.read(input);
          this.success.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SummarizationModel_predict_result.prototype.write = function(output) {
  output.writeStructBegin('SummarizationModel_predict_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SummarizationModelClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
SummarizationModelClient.prototype = {};
SummarizationModelClient.prototype.seqid = function() { return this._seqid; };
SummarizationModelClient.prototype.new_seqid = function() { return this._seqid += 1; };

SummarizationModelClient.prototype.predict = function(articles, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_predict(articles);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_predict(articles);
  }
};

SummarizationModelClient.prototype.send_predict = function(articles) {
  var output = new this.pClass(this.output);
  var params = {
    articles: articles
  };
  var args = new SummarizationModel_predict_args(params);
  try {
    output.writeMessageBegin('predict', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

SummarizationModelClient.prototype.recv_predict = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SummarizationModel_predict_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('predict failed: unknown result');
};

var SummarizationModelProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
SummarizationModelProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
SummarizationModelProcessor.prototype.process_predict = function(seqid, input, output) {
  var args = new SummarizationModel_predict_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.predict.length === 1) {
    Q.fcall(this._handler.predict.bind(this._handler),
      args.articles
    ).then(function(result) {
      var result_obj = new SummarizationModel_predict_result({success: result});
      output.writeMessageBegin("predict", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("predict", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.predict(args.articles, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new SummarizationModel_predict_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("predict", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("predict", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
